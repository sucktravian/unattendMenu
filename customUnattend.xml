<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend"
          xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
    <settings pass="specialize">
        <component name="Microsoft-Windows-Deployment"
                   processorArchitecture="amd64"
                   publicKeyToken="31bf3856ad364e35"
                   language="neutral"
                   versionScope="nonSxS">
            <RunSynchronous>
                <RunSynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE" /v BypassNRO /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>2</Order>
                    <Path>reg.exe delete "HKLM\SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate" /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>3</Order>
                    <Path>cmd.exe /c "del "C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk""</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>4</Order>
                    <Path>cmd.exe /c "del "C:\Windows\System32\OneDriveSetup.exe""</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>5</Order>
                    <Path>cmd.exe /c "del "C:\Windows\SysWOW64\OneDriveSetup.exe""</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>6</Order>
                    <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>7</Order>
                    <Path>reg.exe delete "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run" /v OneDriveSetup /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>8</Order>
                    <Path>reg.exe unload "HKU\DefaultUser"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>9</Order>
                    <Path>reg.exe delete "HKLM\SOFTWARE\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate" /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>10</Order>
                    <Path>reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>11</Order>
                    <Path>powershell.exe -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>12</Order>
                    <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Temp\remove-packages.ps1' -Raw | Invoke-Expression;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>14</Order>
                    <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Temp\remove-features.ps1' -Raw | Invoke-Expression;"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>15</Order>
                    <Path>net.exe accounts /maxpwage:UNLIMITED</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>16</Order>
                    <Path>reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Power" /v HiberbootEnabled /t REG_DWORD /d 0 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>17</Order>
                    <Path>reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>18</Order>
                    <Path>reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\BitLocker" /v "PreventDeviceEncryption" /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>19</Order>
                    <Path>reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>20</Order>
                    <Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>21</Order>
                    <Path>reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "SearchboxTaskbarMode" /t REG_SZ /d "reg.exe add HKCU\Software\Microsoft\Windows\CurrentVersion\Search /v SearchboxTaskbarMode /t REG_DWORD /d 2 /f" /f</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>22</Order>
                    <Path>reg.exe unload "HKU\DefaultUser"</Path>
                </RunSynchronousCommand>
                <RunSynchronousCommand wcm:action="add">
                    <Order>23</Order>
                    <Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;"</Path>
                </RunSynchronousCommand>
            </RunSynchronous>
        </component>
        <component name="Microsoft-Windows-Shell-Setup"
                   processorArchitecture="amd64"
                   publicKeyToken="31bf3856ad364e35"
                   language="neutral"
                   versionScope="nonSxS">
            <ProductKey>XXXXX-XXXXX-XXXXX-XXXXX-XXXXX</ProductKey>
            <TimeZone>Tokyo Standard Time</TimeZone>
        </component>
    </settings>
    <settings pass="oobeSystem">
        <component name="Microsoft-Windows-International-Core"
                   processorArchitecture="amd64"
                   publicKeyToken="31bf3856ad364e35"
                   language="neutral"
                   versionScope="nonSxS">
            <InputLocale>ja-JP</InputLocale>
            <SystemLocale>ja-JP</SystemLocale>
            <UILanguage>ja-JP</UILanguage>
            <UILanguageFallback>en-US</UILanguageFallback>
            <UserLocale>ja-JP</UserLocale>
        </component>
        <component name="Microsoft-Windows-Shell-Setup"
                   processorArchitecture="amd64"
                   publicKeyToken="31bf3856ad364e35"
                   language="neutral"
                   versionScope="nonSxS">
            <UserAccounts>
                <AdministratorPassword>
                    <Value />
                    <PlainText>true</PlainText>
                </AdministratorPassword>
            </UserAccounts>
            <AutoLogon>
                <Username>Administrator</Username>
                <Enabled>true</Enabled>
                <LogonCount>1</LogonCount>
                <Password>
                    <Value />
                    <PlainText>true</PlainText>
                </Password>
            </AutoLogon>
            <OOBE>
                <ProtectYourPC>3</ProtectYourPC>
                <HideEULAPage>true</HideEULAPage>
                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                <HideOnlineAccountScreens>false</HideOnlineAccountScreens>
            </OOBE>
            <FirstLogonCommands>
                <SynchronousCommand wcm:action="add">
                    <Order>1</Order>
                    <CommandLine>reg.exe add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoLogonCount /t REG_DWORD /d 0 /f</CommandLine>
                </SynchronousCommand>
            </FirstLogonCommands>
        </component>
    </settings>
    <Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
        <ExtractScript>            
            param(
            [xml] $Document
            );
            
            $scriptsDir = 'C:\Windows\Setup\Scripts\';
            foreach( $file in $Document.unattend.Extensions.File ) {
            $path = [System.Environment]::ExpandEnvironmentVariables(
            $file.GetAttribute( 'path' )
            );
            if( $path.StartsWith( $scriptsDir ) ) {
            mkdir -Path $scriptsDir -ErrorAction 'SilentlyContinue';
            }
            $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
            { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
            { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
            default { [System.Text.Encoding]::Default; }
            };
            [System.IO.File]::WriteAllBytes( $path, ( $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() ) ) );
            }
        </ExtractScript>
        <File path="C:\Windows\Temp\remove-packages.ps1">            
            $selectors = @(
            'MicrosoftWindows.Client.WebExperience';
            'Microsoft.ZuneMusic';
            'Microsoft.Microsoft3DViewer';
            'Microsoft.BingSearch';
            'Clipchamp.Clipchamp';
            'Microsoft.549981C3F5F10';
            'Microsoft.Windows.DevHome';
            'MicrosoftCorporationII.MicrosoftFamily';
            'Microsoft.WindowsFeedbackHub';
            'Microsoft.GetHelp';
            'Microsoft.Getstarted';
            'microsoft.windowscommunicationsapps';
            'Microsoft.WindowsMaps';
            'Microsoft.MixedReality.Portal';
            'Microsoft.BingNews';
            'Microsoft.MicrosoftOfficeHub';
            'Microsoft.Office.OneNote';
            'Microsoft.OutlookForWindows';
            'Microsoft.People';
            'Microsoft.PowerAutomateDesktop';
            'MicrosoftCorporationII.QuickAssist';
            'Microsoft.SkypeApp';
            'Microsoft.MicrosoftSolitaireCollection';
            'MicrosoftTeams';
            'MSTeams';
            'Microsoft.Todos';
            'Microsoft.WindowsSoundRecorder';
            'Microsoft.Wallet';
            'Microsoft.BingWeather';
            'Microsoft.Xbox.TCUI';
            'Microsoft.XboxApp';
            'Microsoft.XboxGameOverlay';
            'Microsoft.XboxGamingOverlay';
            'Microsoft.XboxIdentityProvider';
            'Microsoft.XboxSpeechToTextOverlay';
            'Microsoft.GamingApp';
            'Microsoft.YourPhone';
            'Microsoft.ZuneVideo';
            );
            $getCommand = { Get-AppxProvisionedPackage -Online; };
            $filterCommand = { $_.DisplayName -eq $selector; };
            $removeCommand = {
            [CmdletBinding()]
            param(
            [Parameter( Mandatory, ValueFromPipeline )]
            $InputObject
            );
            process {
            $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
            }
            };
            $type = 'Package';
            $logfile = 'C:\Windows\Temp\remove-packages.log';
            &amp; {
            $installed = &amp; $getCommand;
            foreach( $selector in $selectors ) {
            $result = [ordered] @{
            Selector = $selector;
            };
            $found = $installed | Where-Object -FilterScript $filterCommand;
            if( $found ) {
            $result.Output = $found | &amp; $removeCommand;
            if( $? ) {
            $result.Message = "$type removed.";
            } else {
            $result.Message = "$type not removed.";
            $result.Error = $Error[0];
            }
            } else {
            $result.Message = "$type not installed.";
            }
            $result | ConvertTo-Json -Depth 3 -Compress;
            }
            } *&gt;&amp;1 &gt;&gt; $logfile;
        </File>
        <File path="C:\Windows\Temp\remove-features.ps1">            
            $selectors = @(
            'Microsoft-RemoteDesktopConnection';
            'Recall';
            );
            $getCommand = { Get-WindowsOptionalFeature -Online; };
            $filterCommand = { $_.FeatureName -eq $selector; };
            $removeCommand = {
            [CmdletBinding()]
            param(
            [Parameter( Mandatory, ValueFromPipeline )]
            $InputObject
            );
            process {
            $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
            }
            };
            $type = 'Feature';
            $logfile = 'C:\Windows\Temp\remove-features.log';
            &amp; {
            $installed = &amp; $getCommand;
            foreach( $selector in $selectors ) {
            $result = [ordered] @{
            Selector = $selector;
            };
            $found = $installed | Where-Object -FilterScript $filterCommand;
            if( $found ) {
            $result.Output = $found | &amp; $removeCommand;
            if( $? ) {
            $result.Message = "$type removed.";
            } else {
            $result.Message = "$type not removed.";
            $result.Error = $Error[0];
            }
            } else {
            $result.Message = "$type not installed.";
            }
            $result | ConvertTo-Json -Depth 3 -Compress;
            }
            } *&gt;&amp;1 &gt;&gt; $logfile;
        </File>
        <File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">            
            $json = '{"pinnedList":[{"packagedAppId":"windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel"},{"desktopAppLink":"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\System Tools\\Control Panel.lnk"},{"desktopAppLink":"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\File Explorer.lnk"},{"packagedAppId":"Microsoft.WindowsNotepad_8wekyb3d8bbwe!App"}]}';
            if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
            return;
            }
            $key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
            New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
            Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
        </File>
    </Extensions>
</unattend>
